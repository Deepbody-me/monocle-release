% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/order_cells.R
\name{preprocessCDS}
\alias{preprocessCDS}
\title{project a CellDataSet object into a lower dimensional PCA (or ISI) space after normalize the data}
\usage{
preprocessCDS(cds, method = c("PCA", "none"), use_tf_idf = FALSE,
  num_dim = 50, norm_method = c("log", "vstExprs", "none"),
  residualModelFormulaStr = NULL, pseudo_expr = 1, relative_expr = TRUE,
  scaling = TRUE, verbose = FALSE, ...)
}
\arguments{
\item{cds}{the CellDataSet upon which to perform this operation}

\item{method}{the initial dimension method to use, current either PCA or LSI. For LSI (latent semantic indexing), 
it converts the (sparse) expression matrix into tf-idf (term-frequency-inverse document frequency 
which increases proportionally to the gene expression value appears in the cell and is offset by the frequency of 
the gene in the entire dataset, which helps to adjust for the fact that some gene appear more frequently across cell in general.) matrix and then performs a 
SVD to decompose the gene expression / cells into certain modules / topics. This method can be used to find associated gene modules}

\item{use_tf_idf}{a logic argument to determine whether we should convert the normalized gene expression value into tf-idf value before performing PCA}

\item{num_dim}{the dimensionality of the reduced space}

\item{norm_method}{Determines how to transform expression values prior to reducing dimensionality}

\item{residualModelFormulaStr}{A model formula specifying the effects to subtract from the data before clustering.}

\item{pseudo_expr}{amount to increase expression values before dimensionality reduction}

\item{relative_expr}{When this argument is set to TRUE (default), we intend to convert the expression into a relative expression.}

\item{scaling}{When this argument is set to TRUE (default), it will scale each gene before running trajectory reconstruction.}

\item{verbose}{Whether to emit verbose output during dimensionality reduction}

\item{...}{additional arguments to pass to the dimensionality reduction function}
}
\value{
an updated CellDataSet object
}
\description{
For most analysis (including trajectory inference, clustering) in Monocle 3, it requires us to to start from a 
low dimensional PCA space. preprocessCDS will be used to first project a CellDataSet object into a lower dimensional PCA space 
before we apply clustering with community detection algorithm or other non-linear dimension reduction method, for example 
UMAP, tSNE, DDRTree, L1-graph, etc.  While tSNE is especially suitable for visualizing clustering results, comparing
to UMAP, the global distance in tSNE space is not meaningful. UMAP can either be used for visualizing clustering result or as a general 
non-linear dimension reduction method. 
SimplePPT, DDRTree and L1-graph are two complementary trajectory inference method where the first one is very great at learning a tree structure 
but the later is general and can learn any arbitrary graph structure. Both methods can be applied to the UMAP space.
}
\details{
In Monocle 3, we overhauled the code from Monocle2 so that a standard Monocle 3 workingflow works as following: 
1. run \code{preprocessCDS} to project a CellDataSet object into a lower dimensional PCA space after 
normalize the data 
2. run \code{reduceDimension} to further project the PCA space into much lower dimension space with non-linear 
dimension reduction techniques, including tSNE, UMAP. 
3. run \code{smoothEmbedding} (optional) to smooth noisy embedding from 2 to facilitate visualization and learning 
of the graph structure.
4. run \code{partitionCells} to partition cells into different graphs based on a similar approach proposed by Alex Wolf and colleagues. 
We then reconstruct the trajectory in each partition with the \code{learnGraph} function. 
5. run \code{learnGraph} to reconstruct developmental trajectory with reversed graph embedding algorithms. In monocle 3, we enabled the 
the capability to learn multiple disjointed trajectory with either tree or loop structure, etc. 

Prior to reducing the dimensionality of the data, it usually helps
to normalize it so that highly expressed or highly variable genes don't
dominate the computation. \code{reduceDimension()} automatically transforms
the data in one of several ways depending on the \code{expressionFamily} of
the CellDataSet object. If the expressionFamily is \code{negbinomial} or \code{negbinomial.size}, the
data are variance-stabilized. If the expressionFamily is \code{Tobit}, the data
are adjusted by adding a pseudocount (of 1 by default) and then log-transformed.
If you don't want any transformation at all, set norm_method to "none" and
pseudo_expr to 0. This maybe useful for single-cell qPCR data, or data you've
already transformed yourself in some way.
}
